extends ../theme-boilerplate.pug

block sidebar
  include ./sidebar
  +consumer_sidebar

block content
  .row: .col-lg-12
    +page-title(question.title, ['Manage Questions', 'Negotiating Questions', 'Details'])

  .row
    .col-xl-3.col-sm-6
      +cardbox('Count of Approved', question.count || '0')
    if question.type === 'integer'
      .col-xl-3.col-sm-6: +cardbox('Perturbed Average', parseInt(question.aggregation) || '0')
    .col-xl-3.col-sm-6(data-intro='you can check your remaining budget.')
      +cardbox('Remained Point', consumer_info.point)
    .col-xl-3.col-sm-6
      +cardbox('Credit', consumer_info.credit)
  .row
    .col-xl-5
      +card(question.type === 'integer' ? 'Numeric Chart' : 'Categorical Chart')
        canvas#ctx
  .row: .col-xl-12
  +card('Providers\' Response')
    if question.is_finish != true
      form.form(action=`/consumer/questions/${question.id}`, method='POST')
        input.btn.btn-danger(type='submit', value='Finish Question', data-intro='if you gather as many answers as you need, you can close the question.')
    else
      button.btn.btn-danger(disabled) Finish Question
    .table-responsive
      table.table.mt-3(data-intro='You can check the negotiation price and epsilon. If you accept the provider\'s negotiation price and epsilon, click the approve button. If you not, click the deny button.')
        thead
          tr
            th.text-center ID
            th.text-center negotiating price
            th.text-center negotiating epsilon
            th.text-center point to pay
            th.text-center Approve/Deny
        tbody
         each transaction in question.Transactions
          tr
            td.text-center #{transaction.Provider.email}
            td.text-center #{transaction.negotiation_price}
            td.text-center #{transaction.negotiation_epsilon}
            td.text-center #{transaction.p_point_change}
            td.text-center(style='min-width: 200px;')
              if transaction.c_approval_flag == 'deny'
                | consumer deny
              else if transaction.p_approval_flag == 'deny'
                | provider deny
              else if transaction.c_approval_flag == 'approve' && transaction.p_approval_flag == 'yet'
                | waiting for provider's approval
              else if transaction.c_approval_flag == 'approve' && transaction.p_approval_flag == 'approve'
                | approved
              else
                form.form.mb-0(style='display: inline-block;', action=`/consumer/negotiation/${transaction.qid}`, method='POST')
                  input(type='hidden', name='type', value='approve')
                  input(type='hidden', name='pid', value=transaction.pid)
                  input.btn.btn-primary(type='submit', value='approve')
                form.form.ml-2.mb-0(style='display: inline-block;', action=`/consumer/negotiation/${transaction.qid}`, method='POST')
                  input(type='hidden', name='type', value='deny')
                  input(type='hidden', name='pid', value=transaction.pid)
                  input.btn.btn-danger(type='submit', value='deny')

      
block script
  script.
    var transactions = JSON.parse('!{JSON.stringify(question.Transactions)}');
    var type = "#{question.type}";

    function drawNumericChart() {
      var min = "#{question.numericMin}";
      var max = "#{question.numericMax}";

      var labeldict = { };

      transactions.forEach(function(transaction) {
        if (transaction.p_approval_flag == 'approve' && transaction.c_approval_flag == 'approve') {
          if (!labeldict[transaction.p_response]) {
            labeldict[transaction.p_response] = 1;
          } else {
            labeldict[transaction.p_response] += 1;
          }
        }
      })
      var labels = Object.keys(labeldict);
      labels = labels.sort();

      var data = [];

      labels.forEach(function(label) {
        data.push(labeldict[label]);
      })
      var ctx = document.getElementById('ctx');
      var mixedChart = new Chart(ctx, {
        type: 'bar',
        data: {
          datasets: [{
            label: 'Bar',
            data: data,
            backgroundColor: 'rgba(255, 200, 100, 0.2)',
            borderColor: 'white',
          }, {
            label: 'Line',
            data: data,
            type: 'line',
            borderColor: 'skyblue',
            backgroundColor: 'transparent'

          }],
          labels: labels,
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                stepSize: 1,
              }
            }],
            xAxes: [{
              ticks: {
                min: min,
                max: max,
              }
            }]
          }
        }
      })
    }

    function drawCategoricalChart() {
      var qoptions = JSON.parse('!{JSON.stringify(question.QuestionOptions)}');
      var labels = qoptions.map(function(option) {
        return option.label;
      });
      var data = JSON.parse('!{JSON.stringify(question.coef)}');
      var ctx = document.getElementById('ctx');
      var barChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
          datasets: [{
            label: 'Bar',
            data: data,
          }],
          labels: labels,
        }
      })

    }
    $(document).ready(function() {
      if (type === 'integer') {
        drawNumericChart();
      } else {
        drawCategoricalChart();
      }
    })
